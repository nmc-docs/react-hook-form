"use strict";(self.webpackChunkreactjs=self.webpackChunkreactjs||[]).push([[645],{1847:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>d});var r=o(4848),t=o(8453);const a={sidebar_position:4},l="V\xed d\u1ee5",s={id:"example",title:"V\xed d\u1ee5",description:"T\u1ea1o component",source:"@site/docs/example.md",sourceDirName:".",slug:"/example",permalink:"/react-hook-form/example",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Watch",permalink:"/react-hook-form/watch"}},i={},d=[{value:"T\u1ea1o component",id:"t\u1ea1o-component",level:2},{value:"Component <code>&lt;Input /&gt;</code>",id:"component-input-",level:3},{value:"Component <code>&lt;Dropdown /&gt;</code>",id:"component-dropdown-",level:3},{value:"Component <code>&lt;RadioSelect /&gt;</code>",id:"component-radioselect-",level:3},{value:"Component <code>&lt;DatePicker /&gt;</code>",id:"component-datepicker-",level:3},{value:"T\u1ea1o form",id:"t\u1ea1o-form",level:2},{value:"K\u1ebft qu\u1ea3",id:"k\u1ebft-qu\u1ea3",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"v\xed-d\u1ee5",children:"V\xed d\u1ee5"})}),"\n",(0,r.jsx)(n.h2,{id:"t\u1ea1o-component",children:"T\u1ea1o component"}),"\n",(0,r.jsxs)(n.h3,{id:"component-input-",children:["Component ",(0,r.jsx)(n.code,{children:"<Input />"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import React from "react";\nimport { TextField, TextFieldProps } from "@mui/material";\n\ntype TInputProps = TextFieldProps & {};\n\nconst Input: React.FC<TInputProps> = ({ sx, ...otherProps }) => {\n  return (\n    <TextField\n      {...otherProps}\n      size="small"\n      fullWidth\n      sx={{ "& .MuiFormHelperText-root": { marginLeft: "3px" }, ...sx }}\n    />\n  );\n};\nexport default Input;\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"component-dropdown-",children:["Component ",(0,r.jsx)(n.code,{children:"<Dropdown />"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import React from "react";\nimport { MenuItem, TextField, TextFieldProps, styled } from "@mui/material";\n\ninterface IDropdownOption {\n  label: string;\n  value: string;\n}\ntype TDropdownProps = TextFieldProps & {\n  options: IDropdownOption[];\n};\n\nconst StyledTextField = styled(TextField)({\n  "& .MuiFormHelperText-root": {\n    marginLeft: "3px",\n  },\n});\n\nconst Dropdown: React.FC<TDropdownProps> = ({ options, ...otherProps }) => {\n  return (\n    <StyledTextField size="small" fullWidth select {...otherProps}>\n      {options.map((option, index) => (\n        <MenuItem key={index} value={option.value}>\n          {option.label}\n        </MenuItem>\n      ))}\n    </StyledTextField>\n  );\n};\n\nexport default Dropdown;\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"component-radioselect-",children:["Component ",(0,r.jsx)(n.code,{children:"<RadioSelect />"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import {\n  FormControl,\n  FormControlLabel,\n  FormHelperText,\n  FormLabel,\n  Radio,\n  RadioGroup,\n  RadioGroupProps,\n} from "@mui/material";\nimport React from "react";\n\ninterface IRadioSelectOption {\n  label: string;\n  value: string;\n}\ntype TRadioSelectProps = RadioGroupProps & {\n  label: string;\n  options: IRadioSelectOption[];\n  errorMessage?: string;\n};\n\nconst RadioSelect: React.FC<TRadioSelectProps> = ({\n  sx,\n  label,\n  options,\n  errorMessage,\n  ...otherProps\n}) => {\n  return (\n    <FormControl sx={sx} fullWidth error={!!errorMessage}>\n      <FormLabel>{label}</FormLabel>\n      <RadioGroup row {...otherProps}>\n        {options.map((option, index) => (\n          <FormControlLabel\n            key={index}\n            value={option.value}\n            control={<Radio />}\n            label={option.label}\n          />\n        ))}\n      </RadioGroup>\n      {errorMessage && (\n        <FormHelperText error sx={{ marginLeft: "3px" }}>\n          {errorMessage}\n        </FormHelperText>\n      )}\n    </FormControl>\n  );\n};\n\nexport default RadioSelect;\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"component-datepicker-",children:["Component ",(0,r.jsx)(n.code,{children:"<DatePicker />"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import * as React from "react";\nimport { AdapterDayjs } from "@mui/x-date-pickers/AdapterDayjs";\nimport { LocalizationProvider } from "@mui/x-date-pickers/LocalizationProvider";\nimport {\n  DatePicker as MUIDatePicker,\n  DatePickerProps,\n} from "@mui/x-date-pickers/DatePicker";\nimport { Dayjs } from "dayjs";\n\ntype TDatePickerProps = DatePickerProps<Dayjs> & {\n  errorMessage?: string;\n};\n\nconst DatePicker: React.FC<TDatePickerProps> = ({\n  sx,\n  errorMessage,\n  ...otherProps\n}) => (\n  <LocalizationProvider dateAdapter={AdapterDayjs}>\n    <MUIDatePicker\n      {...otherProps}\n      slotProps={{\n        textField: {\n          error: !!errorMessage,\n          helperText: errorMessage,\n          fullWidth: true,\n          size: "small",\n          sx: {\n            "& .MuiFormHelperText-root": { marginLeft: "3px" },\n            ...sx,\n          },\n        },\n      }}\n    />\n  </LocalizationProvider>\n);\n\nexport default DatePicker;\n'})}),"\n",(0,r.jsx)(n.h2,{id:"t\u1ea1o-form",children:"T\u1ea1o form"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import { zodResolver } from "@hookform/resolvers/zod";\nimport { SubmitHandler, useForm, Controller } from "react-hook-form";\nimport { Button } from "@mui/material";\nimport { z } from "zod";\nimport dayjs from "dayjs";\n\nimport RadioSelect from "src/components/RadioSelect";\nimport Input from "src/components/Input";\nimport Dropdown from "src/components/Dropdown";\nimport DatePicker from "src/components/DatePicker";\n\ninterface IForm {\n  fullName: string;\n  company: string;\n  gender: string;\n  dob: string;\n  password: string;\n  confirmPassword: string;\n}\n\nconst FormValidationSchema = z\n  .object({\n    fullName: z\n      .string({ coerce: true })\n      .nonempty("Please enter your full name"),\n    company: z.string().nonempty("Please select your company"),\n    gender: z.string().nonempty("Please select your gender"),\n    dob: z.string().nonempty("Please select your date of birth"),\n    password: z.string().nonempty("Please enter your password"),\n    confirmPassword: z.string().nonempty("Please enter your password again"),\n  })\n  .refine((data) => data.confirmPassword === data.password, {\n    message: "Password do not match",\n    path: ["confirmPassword"],\n  });\n\nconst Home = () => {\n  const { handleSubmit, control } = useForm<IForm>({\n    resolver: zodResolver(FormValidationSchema),\n    shouldFocusError: false,\n    defaultValues: {\n      fullName: "",\n      company: "",\n      gender: "",\n      dob: "",\n      password: "",\n      confirmPassword: "",\n    },\n  });\n\n  const onSubmitForm: SubmitHandler<IForm> = async (data) => {\n    console.log(data);\n  };\n\n  return (\n    <>\n      <Controller\n        control={control}\n        name="fullName"\n        render={({ field: { ref, ...otherFields }, fieldState: { error } }) => (\n          <Input\n            label="Full name"\n            {...otherFields}\n            error={!!error?.message}\n            helperText={error?.message}\n          />\n        )}\n      />\n      <Controller\n        control={control}\n        name="company"\n        render={({ field: { ref, ...otherFields }, fieldState: { error } }) => (\n          <Dropdown\n            label="Your company"\n            options={[\n              { label: "Google", value: "Google" },\n              { label: "Microsoft", value: "Microsoft" },\n              { label: "Meta", value: "Meta" },\n              { label: "Amazon", value: "Amazon" },\n            ]}\n            {...otherFields}\n            error={!!error?.message}\n            helperText={error?.message}\n            sx={{ mt: 2 }}\n          />\n        )}\n      />\n      <Controller\n        control={control}\n        name="gender"\n        render={({ field: { ref, ...otherFields }, fieldState: { error } }) => (\n          <RadioSelect\n            label="Gender"\n            options={[\n              { label: "Nam", value: "male" },\n              { label: "N\u1eef", value: "female" },\n              { label: "Kh\xe1c", value: "other" },\n            ]}\n            {...otherFields}\n            errorMessage={error?.message}\n            sx={{ mt: 2 }}\n          />\n        )}\n      />\n      <Controller\n        control={control}\n        name="dob"\n        render={({ field, fieldState: { error } }) => (\n          <DatePicker\n            label="Your date of birth"\n            format="DD/MM/YYYY"\n            value={dayjs(field.value)}\n            onChange={(value) => field.onChange(value?.toISOString())}\n            errorMessage={error?.message}\n            sx={{ mt: 2 }}\n          />\n        )}\n      />\n      <Controller\n        control={control}\n        name="password"\n        render={({ field: { ref, ...otherFields }, fieldState: { error } }) => (\n          <Input\n            label="Password"\n            {...otherFields}\n            error={!!error?.message}\n            helperText={error?.message}\n            type="password"\n            sx={{ mt: 2 }}\n          />\n        )}\n      />\n      <Controller\n        control={control}\n        name="confirmPassword"\n        render={({ field: { ref, ...otherFields }, fieldState: { error } }) => (\n          <Input\n            label="Confirm password"\n            {...otherFields}\n            error={!!error?.message}\n            helperText={error?.message}\n            type="password"\n            sx={{ mt: 2 }}\n          />\n        )}\n      />\n      <Button\n        variant="contained"\n        sx={{ mt: 2, textTransform: "none" }}\n        onClick={handleSubmit(onSubmitForm)}\n      >\n        Submit form\n      </Button>\n    </>\n  );\n};\n\nexport default Home;\n'})}),"\n",(0,r.jsx)(n.h2,{id:"k\u1ebft-qu\u1ea3",children:"K\u1ebft qu\u1ea3"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Link demo: ",(0,r.jsx)(n.a,{href:"https://stackblitz.com/edit/react-hook-form-example-7kjwps",children:"https://stackblitz.com/edit/react-hook-form-example-7kjwps"})]}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>l,x:()=>s});var r=o(6540);const t={},a=r.createContext(t);function l(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);