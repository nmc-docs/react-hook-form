"use strict";(self.webpackChunkhtml=self.webpackChunkhtml||[]).push([[402],{3905:(e,n,r)=>{r.d(n,{Zo:()=>c,kt:()=>d});var t=r(7294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function l(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function s(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var i=t.createContext({}),m=function(e){var n=t.useContext(i),r=n;return e&&(r="function"==typeof e?e(n):l(l({},n),e)),r},c=function(e){var n=m(e.components);return t.createElement(i.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},f=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=m(r),f=o,d=p["".concat(i,".").concat(f)]||p[f]||u[f]||a;return r?t.createElement(d,l(l({ref:n},c),{},{components:r})):t.createElement(d,l({ref:n},c))}));function d(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=r.length,l=new Array(a);l[0]=f;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s[p]="string"==typeof e?e:o,l[1]=s;for(var m=2;m<a;m++)l[m]=r[m];return t.createElement.apply(null,l)}return t.createElement.apply(null,r)}f.displayName="MDXCreateElement"},5555:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>m});var t=r(7462),o=(r(7294),r(3905));const a={sidebar_position:3},l="V\xed d\u1ee5",s={unversionedId:"example",id:"example",title:"V\xed d\u1ee5",description:"T\u1ea1o component ``",source:"@site/docs/example.md",sourceDirName:".",slug:"/example",permalink:"/react-hook-form/example",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"<Controller />",permalink:"/react-hook-form/components/Controller"}},i={},m=[{value:"T\u1ea1o component <code>&lt;Input /&gt;</code>",id:"t\u1ea1o-component-input-",level:2},{value:"T\u1ea1o form",id:"t\u1ea1o-form",level:2}],c={toc:m},p="wrapper";function u(e){let{components:n,...r}=e;return(0,o.kt)(p,(0,t.Z)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"v\xed-d\u1ee5"},"V\xed d\u1ee5"),(0,o.kt)("h2",{id:"t\u1ea1o-component-input-"},"T\u1ea1o component ",(0,o.kt)("inlineCode",{parentName:"h2"},"<Input />")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Ta s\u1ebd custom l\u1ea1i component ",(0,o.kt)("inlineCode",{parentName:"li"},"<Input />")," c\u1ee7a th\u01b0 vi\u1ec7n Chakra UI:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="src/components/Input.tsx"',title:'"src/components/Input.tsx"'},'import {\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Input as ChakraInput,\n  InputProps,\n} from "@chakra-ui/react";\nimport React from "react";\n\ninterface IInputProps extends InputProps {\n  label?: string;\n  errorMessage?: string;\n}\n\nconst Input = React.forwardRef<HTMLInputElement, IInputProps>(\n  ({ label, errorMessage, ...otherProps }, ref) => {\n    return (\n      <FormControl isInvalid={!!errorMessage}>\n        <FormLabel>{label}</FormLabel>\n        <ChakraInput\n          ref={ref}\n          {...otherProps}\n          sx={{ _disabled: { color: "grey" } }}\n        />\n        {errorMessage && <FormErrorMessage>{errorMessage}</FormErrorMessage>}\n      </FormControl>\n    );\n  }\n);\n\nexport default Input;\n')),(0,o.kt)("h2",{id:"t\u1ea1o-form"},"T\u1ea1o form"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Form ch\xfang ta \u0111\u01a1n gi\u1ea3n g\u1ed3m 2 tr\u01b0\u1eddng: ",(0,o.kt)("strong",{parentName:"li"},"firstName")," v\xe0 ",(0,o.kt)("strong",{parentName:"li"},"lastName"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'import { useEffect } from "react";\nimport { Button } from "@chakra-ui/react";\nimport { zodResolver } from "@hookform/resolvers/zod";\nimport { SubmitHandler, useForm, Controller } from "react-hook-form";\nimport Input from "src/components/Input";\nimport { z } from "zod";\n\ninterface IForm {\n  firstName: string;\n  lastName: string;\n}\n\nconst FormValidationSchema = z.object({\n  firstName: z.string().nonempty("Please enter your first name"),\n  lastName: z.string().nonempty("Please enter your last name"),\n});\n\nconst Home = () => {\n  const {\n    handleSubmit,\n    formState: { isSubmitting, isSubmitSuccessful },\n    reset,\n    control,\n  } = useForm<IForm>({\n    resolver: zodResolver(FormValidationSchema),\n    shouldFocusError: false,\n    defaultValues: {\n      firstName: "",\n      lastName: "",\n    },\n  });\n\n  const onSubmitForm: SubmitHandler<IForm> = async (data) => {\n    console.log(data);\n  };\n\n  useEffect(() => {\n    if (isSubmitSuccessful) {\n      reset();\n    }\n  }, [isSubmitSuccessful, reset]);\n\n  return (\n    <>\n      <Controller\n        control={control}\n        name="firstName"\n        render={({ field, fieldState: { error } }) => (\n          <Input label="First name" {...field} errorMessage={error?.message} />\n        )}\n      />\n      <Controller\n        control={control}\n        name="lastName"\n        render={({ field, fieldState: { error } }) => (\n          <Input\n            label="Last name"\n            {...field}\n            onChange={(event) => field.onChange(event.target.value)}\n            errorMessage={error?.message}\n          />\n        )}\n      />\n      <Button\n        colorScheme="purple"\n        onClick={handleSubmit(onSubmitForm)}\n        isLoading={isSubmitting}\n      >\n        Submit\n      </Button>\n    </>\n  );\n};\n\nexport default Home;\n')))}u.isMDXComponent=!0}}]);